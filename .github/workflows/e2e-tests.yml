name: E2E Visual Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM

jobs:
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Start application
      working-directory: ./frontend
      run: npm start &
      
    - name: Wait for application
      run: npx wait-on http://localhost:3000 --timeout 60000
      
    - name: Run visual regression tests
      working-directory: ./frontend
      run: npx playwright test visual-regression.spec.ts
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  cross-browser:
    name: Cross-Browser Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps ${{ matrix.browser }}
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Start application
      working-directory: ./frontend
      run: npm start &
      
    - name: Wait for application
      run: npx wait-on http://localhost:3000 --timeout 60000
      
    - name: Run cross-browser tests
      working-directory: ./frontend
      run: npx playwright test cross-browser.spec.ts --project=${{ matrix.browser }}
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: frontend/playwright-report/
        retention-days: 30

  responsive-design:
    name: Responsive Design Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Start application
      working-directory: ./frontend
      run: npm start &
      
    - name: Wait for application
      run: npx wait-on http://localhost:3000 --timeout 60000
      
    - name: Run responsive design tests
      working-directory: ./frontend
      run: npx playwright test responsive-design.spec.ts
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-responsive
        path: frontend/playwright-report/
        retention-days: 30

  css-visual:
    name: CSS Visual Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Start application
      working-directory: ./frontend
      run: npm start &
      
    - name: Wait for application
      run: npx wait-on http://localhost:3000 --timeout 60000
      
    - name: Run CSS visual tests
      working-directory: ./frontend
      run: npx playwright test css-visual-tests.spec.ts
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-css
        path: frontend/playwright-report/
        retention-days: 30

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Start application
      working-directory: ./frontend
      run: npm start &
      
    - name: Wait for application
      run: npx wait-on http://localhost:3000 --timeout 60000
      
    - name: Run performance tests
      working-directory: ./frontend
      run: npx playwright test --grep "Performance"
      
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: frontend/test-results/
        retention-days: 30

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Start application
      working-directory: ./frontend
      run: npm start &
      
    - name: Wait for application
      run: npx wait-on http://localhost:3000 --timeout 60000
      
    - name: Run accessibility tests
      working-directory: ./frontend
      run: npx playwright test --grep "Accessibility"
      
    - name: Upload accessibility results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-results
        path: frontend/test-results/
        retention-days: 30

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [visual-regression, cross-browser, responsive-design, css-visual, performance, accessibility]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Visual Regression Tests: ${{ needs.visual-regression.result }}"
        echo "Cross-Browser Tests: ${{ needs.cross-browser.result }}"
        echo "Responsive Design Tests: ${{ needs.responsive-design.result }}"
        echo "CSS Visual Tests: ${{ needs.css-visual.result }}"
        echo "Performance Tests: ${{ needs.performance.result }}"
        echo "Accessibility Tests: ${{ needs.accessibility.result }}"
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('E2E Test Results')
          );
          
          const results = {
            'Visual Regression': '${{ needs.visual-regression.result }}',
            'Cross-Browser': '${{ needs.cross-browser.result }}',
            'Responsive Design': '${{ needs.responsive-design.result }}',
            'CSS Visual': '${{ needs.css-visual.result }}',
            'Performance': '${{ needs.performance.result }}',
            'Accessibility': '${{ needs.accessibility.result }}'
          };
          
          const statusEmoji = (status) => {
            switch(status) {
              case 'success': return '✅';
              case 'failure': return '❌';
              case 'cancelled': return '⏹️';
              default: return '⏳';
            }
          };
          
          const body = `## 🎭 E2E Test Results
          
          | Test Suite | Status |
          |------------|--------|
          ${Object.entries(results).map(([name, status]) => 
            `| ${name} | ${statusEmoji(status)} ${status} |`
          ).join('\n')}
          
          **View detailed results in the Actions tab.**`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              issue_number: context.issue.number,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              issue_number: context.issue.number,
              body: body
            });
          }