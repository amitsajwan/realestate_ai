"""Localization service for multi-language support."""
import json
from typing import Dict, Any, Optional, List
from models.localization import (
    Language, IndianListingDetails, MarathiTemplates, 
    AutoResponseMarathi, TranslationEntry
)
import random


class LocalizationService:
    """Service for handling localization and translations."""
    
    def __init__(self):
        # Use the classes directly (they contain class attributes)
        self.marathi_templates = MarathiTemplates
        self.marathi_responses = AutoResponseMarathi
        self.translations = self._load_translations()
    
    def _load_translations(self) -> Dict[str, Dict[str, str]]:
        """Load translation dictionary."""
        return {
            # Common real estate terms
            "property": {"en": "Property", "mr": "‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ"},
            "house": {"en": "House", "mr": "‡§ò‡§∞"},
            "apartment": {"en": "Apartment", "mr": "‡§´‡•ç‡§≤‡•Ö‡§ü"},
            "villa": {"en": "Villa", "mr": "‡§µ‡•ç‡§π‡§ø‡§≤‡§æ"},
            "plot": {"en": "Plot", "mr": "‡§™‡•ç‡§≤‡•â‡§ü"},
            "price": {"en": "Price", "mr": "‡§ï‡§ø‡§Ç‡§Æ‡§§"},
            "area": {"en": "Area", "mr": "‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≥"},
            "bedroom": {"en": "Bedroom", "mr": "‡§¨‡•á‡§°‡§∞‡•Ç‡§Æ"},
            "bathroom": {"en": "Bathroom", "mr": "‡§¨‡§æ‡§•‡§∞‡•Ç‡§Æ"},
            "parking": {"en": "Parking", "mr": "‡§™‡§æ‡§∞‡•ç‡§ï‡§ø‡§Ç‡§ó"},
            "balcony": {"en": "Balcony", "mr": "‡§¨‡§æ‡§≤‡§ï‡§®‡•Ä"},
            
            # Location terms
            "near": {"en": "Near", "mr": "‡§ú‡§µ‡§≥"},
            "location": {"en": "Location", "mr": "‡§∏‡•ç‡§•‡§æ‡§®"},
            "society": {"en": "Society", "mr": "‡§∏‡•ã‡§∏‡§æ‡§Ø‡§ü‡•Ä"},
            "building": {"en": "Building", "mr": "‡§á‡§Æ‡§æ‡§∞‡§§"},
            
            # Transaction terms
            "for_sale": {"en": "For Sale", "mr": "‡§µ‡§ø‡§ï‡•ç‡§∞‡•Ä‡§∏‡§æ‡§†‡•Ä"},
            "for_rent": {"en": "For Rent", "mr": "‡§≠‡§æ‡§°‡•ç‡§Ø‡§æ‡§®‡•á"},
            "sold": {"en": "SOLD", "mr": "‡§µ‡§ø‡§ï‡§≤‡•á ‡§ó‡•á‡§≤‡•á"},
            "rented": {"en": "RENTED", "mr": "‡§≠‡§æ‡§°‡•ç‡§Ø‡§æ‡§®‡•á ‡§¶‡§ø‡§≤‡•á"},
            
            # Features
            "furnished": {"en": "Furnished", "mr": "‡§∏‡•Å‡§∏‡§ú‡•ç‡§ú"},
            "unfurnished": {"en": "Unfurnished", "mr": "‡§∞‡§ø‡§ï‡§æ‡§Æ‡•á"},
            "semi_furnished": {"en": "Semi-Furnished", "mr": "‡§Ö‡§∞‡•ç‡§ß-‡§∏‡•Å‡§∏‡§ú‡•ç‡§ú"},
            "ready_to_move": {"en": "Ready to Move", "mr": "‡§∞‡§æ‡§π‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§§‡§Ø‡§æ‡§∞"},
            "under_construction": {"en": "Under Construction", "mr": "‡§¨‡§æ‡§Ç‡§ß‡§ï‡§æ‡§Æ ‡§∏‡•Å‡§∞‡•Ç"},
            
            # Contact terms
            "contact": {"en": "Contact", "mr": "‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï"},
            "call": {"en": "Call", "mr": "‡§ï‡•â‡§≤ ‡§ï‡§∞‡§æ"},
            "whatsapp": {"en": "WhatsApp", "mr": "‡§µ‡•ç‡§π‡•â‡§ü‡•ç‡§∏‡§ç‡§™"},
            "visit": {"en": "Visit", "mr": "‡§≠‡•á‡§ü ‡§¶‡•ç‡§Ø‡§æ"},
            "schedule": {"en": "Schedule", "mr": "‡§µ‡•á‡§≥‡§æ‡§™‡§§‡•ç‡§∞‡§ï"},
            
            # Common phrases
            "interested": {"en": "Interested", "mr": "‡§∏‡•ç‡§µ‡§æ‡§∞‡§∏‡•ç‡§Ø"},
            "available": {"en": "Available", "mr": "‡§â‡§™‡§≤‡§¨‡•ç‡§ß"},
            "thank_you": {"en": "Thank you", "mr": "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶"},
            "welcome": {"en": "Welcome", "mr": "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§"},
            "best_deal": {"en": "Best Deal", "mr": "‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§ë‡§´‡§∞"},
            "urgent": {"en": "Urgent", "mr": "‡§§‡§æ‡§§‡§°‡•Ä‡§ö‡•á"},
            "new": {"en": "New", "mr": "‡§®‡§µ‡•Ä‡§®"},
            "exclusive": {"en": "Exclusive", "mr": "‡§ñ‡§æ‡§∏"},
            
            # Financial terms
            "emi": {"en": "EMI", "mr": "EMI"},
            "loan": {"en": "Loan", "mr": "‡§ï‡§∞‡•ç‡§ú"},
            "down_payment": {"en": "Down Payment", "mr": "‡§°‡§æ‡§â‡§® ‡§™‡•á‡§Æ‡•á‡§Ç‡§ü"},
            "registration": {"en": "Registration", "mr": "‡§®‡•ã‡§Ç‡§¶‡§£‡•Ä"},
            "brokerage": {"en": "Brokerage", "mr": "‡§¶‡§≤‡§æ‡§≤‡•Ä"},
            
            # Time-related
            "today": {"en": "Today", "mr": "‡§Ü‡§ú"},
            "tomorrow": {"en": "Tomorrow", "mr": "‡§â‡§¶‡•ç‡§Ø‡§æ"},
            "immediately": {"en": "Immediately", "mr": "‡§≤‡§ó‡•á‡§ö"},
            "soon": {"en": "Soon", "mr": "‡§≤‡§µ‡§ï‡§∞‡§ö"},
        }
    
    def translate(self, key: str, language: Language = Language.MARATHI) -> str:
        """Translate a key to specified language."""
        if key in self.translations:
            return self.translations[key].get(language.value, key)
        return key
    
    def format_price_inr(self, price: float) -> str:
        """Format price in Indian format (Lakhs/Crores)."""
        if price >= 10000000:  # 1 Crore
            crores = price / 10000000
            if crores == int(crores):
                return f"‚Çπ{int(crores)} Cr"
            else:
                return f"‚Çπ{crores:.1f} Cr"
        elif price >= 100000:  # 1 Lakh
            lakhs = price / 100000
            if lakhs == int(lakhs):
                return f"‚Çπ{int(lakhs)} L"
            else:
                return f"‚Çπ{lakhs:.1f} L"
        else:
            return f"‚Çπ{int(price):,}"
    
    def generate_marathi_listing_post(self, listing: IndianListingDetails, 
                                    template_type: str = "just_listed") -> str:
        """Generate a Marathi social media post for a listing."""
        
        # Format price
        formatted_price = self.format_price_inr(listing.price)
        
        # Get appropriate templates
        templates = []
        if template_type == "just_listed":
            templates = self.marathi_templates.just_listed_templates
        elif template_type == "open_house":
            templates = self.marathi_templates.open_house_templates
        elif template_type == "price_drop":
            templates = self.marathi_templates.price_drop_templates
        elif template_type == "sold":
            templates = self.marathi_templates.sold_templates
        elif template_type == "coming_soon":
            templates = self.marathi_templates.coming_soon_templates
        else:
            templates = self.marathi_templates.just_listed_templates
        
        # Select random template
        template = random.choice(templates)
        
        # Prepare replacement values
        values = {
            "location": listing.location.locality_mr or listing.location.locality,
            "property_type": self.translate(listing.property_type.value),
            "price": formatted_price,
            "bedrooms": listing.bedrooms or "N/A",
            "carpet_area": f"{listing.carpet_area} ‡§ö‡•å.‡§´‡•Ç‡§ü" if listing.carpet_area else "N/A",
            "furnished": self.translate(listing.furnished.lower() if listing.furnished else "unfurnished"),
        }
        
        # Handle specific template types
        if template_type == "price_drop" and "old_price" in template:
            old_price = listing.price * 1.1  # Assume 10% reduction
            values["old_price"] = self.format_price_inr(old_price)
            values["discount"] = self.format_price_inr(old_price - listing.price)
        
        if template_type == "open_house":
            from datetime import datetime, timedelta
            next_sunday = datetime.now() + timedelta(days=(6 - datetime.now().weekday()))
            values["date"] = next_sunday.strftime("%d/%m")
            values["time"] = "‡•ß‡•ß:‡•¶‡•¶ ‡§§‡•á ‡•®:‡•¶‡•¶"
        
        if template_type == "sold":
            values["days"] = "‡•®‡•ß"  # Marathi numeral for 21
        
        if template_type == "coming_soon":
            from datetime import datetime, timedelta
            launch_date = datetime.now() + timedelta(days=30)
            values["launch_date"] = launch_date.strftime("%B %Y")
        
        # Replace placeholders
        try:
            post = template.format(**values)
        except KeyError:
            # If some placeholders are missing, use basic template
            post = template
            for key, value in values.items():
                post = post.replace(f"{{{key}}}", str(value))
        
        # Add fair housing disclaimer in Marathi
        disclaimer = "\n\nüìã ‡§∏‡§∞‡•ç‡§µ ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§∏‡§Æ‡§æ‡§® ‡§∏‡§Ç‡§ß‡•Ä. ‡§≠‡•á‡§¶‡§≠‡§æ‡§µ ‡§®‡§æ‡§π‡•Ä."
        
        return post + disclaimer
    
    def get_marathi_auto_response(self, comment_text: str, 
                                property_details: Optional[IndianListingDetails] = None) -> str:
        """Get appropriate Marathi auto-response based on comment."""
        
        comment_lower = comment_text.lower()
        
        # Detect inquiry type
        if any(word in comment_lower for word in ["price", "‡§ï‡§ø‡§Ç‡§Æ‡§§", "rate", "cost"]):
            responses = self.marathi_responses.price_inquiry
        elif any(word in comment_lower for word in ["available", "‡§â‡§™‡§≤‡§¨‡•ç‡§ß", "free"]):
            responses = self.marathi_responses.availability_inquiry
        elif any(word in comment_lower for word in ["visit", "see", "‡§™‡§æ‡§π‡§æ‡§Ø‡§ö‡•á", "show"]):
            responses = self.marathi_responses.viewing_request
        else:
            responses = self.marathi_responses.general_inquiry
        
        # Select random response
        response = random.choice(responses)
        
        # Replace placeholders if property details available
        if property_details:
            values = {
                "price": self.format_price_inr(property_details.price),
                "phone": "+91-98765-43210",  # Default phone
            }
            
            # Calculate approximate EMI (assuming 20-year loan at 8.5%)
            if property_details.price:
                loan_amount = property_details.price * 0.8  # 80% loan
                monthly_rate = 0.085 / 12
                num_payments = 20 * 12
                emi = (loan_amount * monthly_rate * (1 + monthly_rate)**num_payments) / ((1 + monthly_rate)**num_payments - 1)
                values["emi"] = self.format_price_inr(emi)
            
            try:
                response = response.format(**values)
            except KeyError:
                # If formatting fails, return as is
                pass
        
        return response
    
    def detect_language(self, text: str) -> Language:
        """Detect language of the text (simple implementation)."""
        # Check for Devanagari script (Marathi/Hindi)
        marathi_chars = any('\u0900' <= char <= '\u097F' for char in text)
        
        if marathi_chars:
            # Simple heuristic: check for common Marathi words
            marathi_words = ["‡§Ü‡§π‡•á", "‡§Æ‡§ß‡•ç‡§Ø‡•á", "‡§∏‡§æ‡§†‡•Ä", "‡§ö‡•á", "‡§ö‡•Ä", "‡§Ø‡§æ", "‡§§‡•á", "‡§™‡§æ‡§π‡§æ‡§Ø‡§ö‡•á"]
            if any(word in text for word in marathi_words):
                return Language.MARATHI
            else:
                return Language.HINDI
        
        return Language.ENGLISH
    
    def get_city_translations(self) -> Dict[str, Dict[str, str]]:
        """Get common Indian city name translations."""
        return {
            "mumbai": {"en": "Mumbai", "mr": "‡§Æ‡•Å‡§Ç‡§¨‡§à"},
            "pune": {"en": "Pune", "mr": "‡§™‡•Å‡§£‡•á"},
            "nagpur": {"en": "Nagpur", "mr": "‡§®‡§æ‡§ó‡§™‡•Ç‡§∞"},
            "nashik": {"en": "Nashik", "mr": "‡§®‡§æ‡§∂‡§ø‡§ï"},
            "aurangabad": {"en": "Aurangabad", "mr": "‡§î‡§∞‡§Ç‡§ó‡§æ‡§¨‡§æ‡§¶"},
            "kolhapur": {"en": "Kolhapur", "mr": "‡§ï‡•ã‡§≤‡•ç‡§π‡§æ‡§™‡•Ç‡§∞"},
            "solapur": {"en": "Solapur", "mr": "‡§∏‡•ã‡§≤‡§æ‡§™‡•Ç‡§∞"},
            "sangli": {"en": "Sangli", "mr": "‡§∏‡§æ‡§Ç‡§ó‡§≤‡•Ä"},
            "satara": {"en": "Satara", "mr": "‡§∏‡§æ‡§§‡§æ‡§∞‡§æ"},
            "thane": {"en": "Thane", "mr": "‡§†‡§æ‡§£‡•á"},
            "navi_mumbai": {"en": "Navi Mumbai", "mr": "‡§®‡§µ‡•Ä ‡§Æ‡•Å‡§Ç‡§¨‡§à"},
            "kalyan": {"en": "Kalyan", "mr": "‡§ï‡§≤‡•ç‡§Ø‡§æ‡§£"},
            "dombivli": {"en": "Dombivli", "mr": "‡§°‡•ã‡§Ç‡§¨‡§ø‡§µ‡§≤‡•Ä"},
            "vasai": {"en": "Vasai", "mr": "‡§µ‡§∏‡§à"},
            "virar": {"en": "Virar", "mr": "‡§µ‡§ø‡§∞‡§æ‡§∞"},
        }
    
    def get_marathi_hashtags(self, property_type: str, location: str) -> List[str]:
        """Generate relevant Marathi hashtags."""
        base_tags = ["#RealEstate", "#Property", "#‡§Æ‡§æ‡§≤‡§Æ‡§§‡•ç‡§§‡§æ", "#‡§ò‡§∞", "#Maharashtra", "#‡§Æ‡§∞‡§æ‡§†‡•Ä"]
        
        # Add property type specific tags
        if property_type == "apartment":
            base_tags.extend(["#Flat", "#‡§´‡•ç‡§≤‡•Ö‡§ü", "#Apartment"])
        elif property_type == "villa":
            base_tags.extend(["#Villa", "#‡§µ‡•ç‡§π‡§ø‡§≤‡§æ", "#IndependentHouse"])
        elif property_type == "plot":
            base_tags.extend(["#Plot", "#‡§™‡•ç‡§≤‡•â‡§ü", "#Land"])
        
        # Add location tags
        location_lower = location.lower()
        if "mumbai" in location_lower:
            base_tags.extend(["#Mumbai", "#‡§Æ‡•Å‡§Ç‡§¨‡§à", "#MumbaiProperties"])
        elif "pune" in location_lower:
            base_tags.extend(["#Pune", "#‡§™‡•Å‡§£‡•á", "#PuneProperties"])
        
        return base_tags[:10]  # Limit to 10 hashtags
