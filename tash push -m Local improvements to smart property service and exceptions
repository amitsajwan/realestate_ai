[1mdiff --git a/backend/app/services/smart_property_service.py b/backend/app/services/smart_property_service.py[m
[1mindex 18fbd94..3d53a26 100644[m
[1m--- a/backend/app/services/smart_property_service.py[m
[1m+++ b/backend/app/services/smart_property_service.py[m
[36m@@ -2,6 +2,7 @@[m [mfrom typing import List, Optional[m
 from datetime import datetime[m
 from motor.motor_asyncio import AsyncIOMotorCollection[m
 from bson import ObjectId[m
[32m+[m[32mimport logging[m
 [m
 from app.schemas.unified_property import ([m
     PropertyDocument as SmartPropertyDocument,[m
[36m@@ -10,6 +11,9 @@[m [mfrom app.schemas.unified_property import ([m
     PropertyResponse as SmartPropertyResponse[m
 )[m
 from app.core.database import get_database[m
[32m+[m[32mfrom app.core.exceptions import PropertyNotFoundError, DatabaseError[m
[32m+[m
[32m+[m[32mlogger = logging.getLogger(__name__)[m
 [m
 [m
 class SmartPropertyService:[m
[36m@@ -22,38 +26,57 @@[m [mclass SmartPropertyService:[m
         smart_property: SmartPropertyCreate,[m
         user_id: str[m
     ) -> SmartPropertyDocument:[m
[31m-        """Create a new smart property document."""[m
[31m-        smart_property_doc = SmartPropertyDocument([m
[31m-            **smart_property.dict(),[m
[31m-            user_id=user_id,[m
[31m-            created_at=datetime.utcnow(),[m
[31m-            updated_at=datetime.utcnow()[m
[31m-        )[m
[31m-[m
[31m-        result = await self.collection.insert_one(smart_property_doc.dict(by_alias=True))[m
[31m-        smart_property_doc.id = result.inserted_id[m
[31m-[m
[31m-        return smart_property_doc[m
[32m+[m[32m        """Create a new smart property document with proper error handling."""[m
[32m+[m[32m        try:[m
[32m+[m[32m            logger.info(f"Creating smart property for user {user_id}")[m
[32m+[m[41m            [m
[32m+[m[32m            smart_property_doc = SmartPropertyDocument([m
[32m+[m[32m                **smart_property.dict(),[m
[32m+[m[32m                user_id=user_id,[m
[32m+[m[32m                created_at=datetime.utcnow(),[m
[32m+[m[32m                updated_at=datetime.utcnow()[m
[32m+[m[32m            )[m
[32m+[m
[32m+[m[32m            result = await self.collection.insert_one(smart_property_doc.dict(by_alias=True))[m
[32m+[m[32m            smart_property_doc.id = result.inserted_id[m
[32m+[m
[32m+[m[32m            logger.info(f"Smart property created successfully with ID: {result.inserted_id}")[m
[32m+[m[32m            return smart_property_doc[m
[32m+[m[41m            [m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            logger.error(f"Failed to create smart property: {e}")[m
[32m+[m[32m            raise DatabaseError(f"Failed to create smart property: {str(e)}")[m
 [m
     async def get_smart_property([m
         self,[m
         smart_property_id: str,[m
         user_id: str[m
     ) -> Optional[SmartPropertyDocument]:[m
[31m-        """Get a smart property by ID for the specified user."""[m
[32m+[m[32m        """Get a smart property by ID for the specified user with proper error handling."""[m
         try:[m
[31m-            obj_id = ObjectId(smart_property_id)[m
[31m-        except:[m
[31m-            return None[m
[31m-[m
[31m-        doc = await self.collection.find_one({[m
[31m-            "_id": obj_id,[m
[31m-            "user_id": user_id[m
[31m-        })[m
[31m-[m
[31m-        if doc:[m
[31m-            return SmartPropertyDocument(**doc)[m
[31m-        return None[m
[32m+[m[32m            logger.info(f"Fetching smart property {smart_property_id} for user {user_id}")[m
[32m+[m[41m            [m
[32m+[m[32m            try:[m
[32m+[m[32m                obj_id = ObjectId(smart_property_id)[m
[32m+[m[32m            except Exception:[m
[32m+[m[32m                logger.warning(f"Invalid ObjectId format: {smart_property_id}")[m
[32m+[m[32m                return None[m
[32m+[m
[32m+[m[32m            doc = await self.collection.find_one({[m
[32m+[m[32m                "_id": obj_id,[m
[32m+[m[32m                "user_id": user_id[m
[32m+[m[32m            })[m
[32m+[m
[32m+[m[32m            if doc:[m
[32m+[m[32m                logger.info(f"Smart property found: {smart_property_id}")[m
[32m+[m[32m                return SmartPropertyDocument(**doc)[m
[32m+[m[32m            else:[m
[32m+[m[32m                logger.info(f"Smart property not found: {smart_property_id}")[m
[32m+[m[32m                return None[m
[32m+[m[41m                [m
[32m+[m[32m        except Exception as e:[m
[32m+[m[32m            logger.error(f"Failed to get smart property {smart_property_id}: {e}")[m
[32m+[m[32m            raise DatabaseError(f"Failed to retrieve smart property: {str(e)}")[m
 [m
     async def get_smart_properties_by_user([m
         self,[m
[36m@@ -122,3 +145,15 @@[m [mclass SmartPropertyService:[m
 [m
         docs = await cursor.to_list(length=None)[m
         return [SmartPropertyDocument(**doc) for doc in docs][m
[32m+[m[32m<<<<<<< Current (Your changes)[m
[32m+[m[32m=======[m
[32m+[m
[32m+[m[32m    async def get_user_smart_properties([m
[32m+[m[32m        self,[m
[32m+[m[32m        user_id: str,[m
[32m+[m[32m        skip: int = 0,[m
[32m+[m[32m        limit: int = 100[m
[32m+[m[32m    ) -> List[SmartPropertyDocument]:[m
[32m+[m[32m        """Get all smart properties for a user - alias for get_smart_properties_by_user."""[m
[32m+[m[32m        return await self.get_smart_properties_by_user(user_id, skip, limit)[m
[32m+[m[32m>>>>>>> Incoming (Background Agent changes)[m
