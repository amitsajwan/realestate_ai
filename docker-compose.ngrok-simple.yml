# =============================================================================
# SIMPLE NGROK DOCKER COMPOSE - USES EXISTING MONGODB
# =============================================================================

version: '3.8'

services:
  # Nginx proxy for ngrok
  nginx:
    image: nginx:alpine
    container_name: real-estate-nginx-ngrok
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx-ngrok.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - real-estate-network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: real-estate-backend-ngrok
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database - Use existing MongoDB
      - MONGODB_URL=mongodb://localhost:27017
      - DATABASE_NAME=real_estate_platform
      
      # Authentication
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=30
      - BCRYPT_ROUNDS=12
      
      # Server
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=True
      
      # CORS - nginx handles external origins
      - ALLOWED_ORIGINS=http://frontend:3000,http://nginx:80
      
      # Rate Limiting
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      
      # Feature Flags
      - ENABLE_MULTILANGUAGE=True
      - ENABLE_FACEBOOK_INTEGRATION=True
      - ENABLE_EMAIL_NOTIFICATIONS=False
      - ENABLE_ANALYTICS=True
      - ENABLE_AI_FEATURES=True
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_FILE=logs/app.log
      
      # Security
      - SECURE_SSL_REDIRECT=False
      - SESSION_COOKIE_SECURE=False
      - SESSION_COOKIE_HTTPONLY=True
      - SESSION_COOKIE_SAMESITE=Lax
      
    depends_on:
      - redis
    networks:
      - real-estate-network
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: real-estate-frontend-ngrok
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # API Configuration - Use relative paths for single URL deployment
      - NEXT_PUBLIC_API_BASE_URL=
      - NEXT_PUBLIC_APP_URL=
      
      # Environment
      - NODE_ENV=production
      
      # Feature Flags
      - NEXT_PUBLIC_ENABLE_MULTILANGUAGE=true
      - NEXT_PUBLIC_ENABLE_FACEBOOK_INTEGRATION=true
      - NEXT_PUBLIC_ENABLE_AI_FEATURES=true
      - NEXT_PUBLIC_ENABLE_ANALYTICS=true
      
      # Application Settings
      - NEXT_PUBLIC_APP_NAME=PropertyAI
      - NEXT_PUBLIC_APP_VERSION=1.0.0
      - NEXT_PUBLIC_DEFAULT_LANGUAGE=en
      
      # UI Configuration
      - NEXT_PUBLIC_DEFAULT_THEME=light
      - NEXT_PUBLIC_ENABLE_DARK_MODE=true
      - NEXT_PUBLIC_ENABLE_ANIMATIONS=true
      
      # Security
      - NEXT_PUBLIC_FORCE_HTTPS=false
      
    depends_on:
      - backend
    networks:
      - real-estate-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: real-estate-redis-ngrok
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - real-estate-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local

networks:
  real-estate-network:
    driver: bridge
